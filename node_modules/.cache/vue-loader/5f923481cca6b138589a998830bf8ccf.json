{"remainingRequest":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\result\\realtimeindex.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\src\\views\\indicators\\result\\realtimeindex.vue","mtime":1644564110980},{"path":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\workspace-suzhouzhibiao\\code\\indicator\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport crudIndicatorResult from '../../../api/indicators/indicatorRealTimeResult'\n  import CRUD, { presenter, header, form, crud } from '@crud/crud'\n  import rrOperation from '@crud/RR.operation'\n  import crudOperation from '@crud/CRUD.operation'\n  // import udOperation from '@crud/UD.operation'\n  import pagination from '@crud/Pagination'\n  import crudIndCategory from '@/api/indicators/indCategory'\n  import category from '../category/category'\n  //import { getDepts } from '@/utils/system'\n  import { getResultDepts} from '@/api/indicators/indResultSubscribe'\n  import Treeselect from '@riophae/vue-treeselect'\n  import '@riophae/vue-treeselect/dist/vue-treeselect.css'\n  //import moment from \"moment\";\n  // crud交由presenter持有\n  const defaultCrud = CRUD({\n    title: '指标计算结果表',\n    url: crudIndicatorResult.url,\n    sort: 'id,desc',\n    initQry: false,\n    crudMethod: { ...crudIndicatorResult.crud }\n  })\n  const defaultForm = {\n    id: null,\n    orgId: null,\n    ieId: null,\n    ieCode: null,\n    ieName: null,\n    ieValue: null,\n    status: null,\n    crtUserCode: null,\n    crtOrgCode: null,\n    crtDate: null,\n    updUserCode: null,\n    updOrgCode: null,\n    updDate: null,\n    frequency: null,\n    periodDateInterval:null,\n    ieKindOneName:null\n  }\n  export default {\n    name: 'IndicatorRealTimeResult',\n    components: { Treeselect,pagination, crudOperation, rrOperation, category },\n    mixins: [presenter(defaultCrud), header(), form(defaultForm), crud()],\n    dicts: ['IND_FIRST_TYPE','RETENTION', 'IE_TYPE', 'IE_STATUS','IND_CURRENCY','YN','IE_FREQUENCY'],\n    data() {\n      return {\n        depts: [],\n        qryIndFirstType: [],\n        defaultProps: {\n          children: 'children',\n          label: 'label'\n        },\n        table: {\n          columns: {\n            id: 'hidden',\n            ieId: 'hidden',\n            updUserCode: 'hidden',\n            updDate: 'hidden'\n          }\n        },\n        permission: {\n          add: [''],\n          edit: [''],\n          del: ['']\n        },\n        showDialog: false,\n        pickerMinDate: \"\",//第一次选中的时间\n        pickerOptions: {\n          onPick: obj => {\n\n            this.pickerMinDate = new Date(obj.minDate).getTime();\n            console.log(\"times===>,\" + this.pickerTimes + \", pickerMinDate==>\" + this.pickerMinDate)\n            this.pickerMaxDate = new Date(obj.maxDate).getTime();\n          },\n          disabledDate: time => {\n            if (this.pickerMinDate) {\n              const day1 = 366 * 24 * 3600 * 1000;\n              let maxTime = this.pickerMinDate + day1;\n              let minTime = this.pickerMinDate - day1;\n              return time.getTime() > maxTime || time.getTime() < minTime;\n            }\n          }\n        },\n        form:{},\n      }\n    },\n    created() {\n      //defaultCrud.query.periodDateInterval = this.timeDefault\n      this.crud.optShow.del=false\n      this.crud.optShow.edit=false\n      this.crud.optShow.add=false\n      this.resetQuery()\n    },\n    mounted() {\n      this.query.ieName = this.$route.query.ieName\n      if(this.query.ieName == null || this.query.ieName == 'undefined'){\n        defaultCrud.initQry = false\n      }else{\n        //CRUD.toQuery\n      }\n      defaultCrud.refresh()\n      this.getDepts();\n      this.initIndFirstType();\n    },\n    computed: {\n      // 默认时间\n      /*timeDefault () {\n        /!*console.log(\"times===>,\" + this.pickerTimes)*!/\n        var defalutStartTime = moment().subtract(1,\"year\").format('YYYY-MM-DD')\n        var defalutEndTime = moment().format('YYYY-MM-DD')\n        return [defalutStartTime, defalutEndTime]\n      }*/\n    },\n    methods: {\n      resetQuery(){\n        this.crud.resetQuery(false);\n        this.crud.refresh()\n      },\n      // 获取数据前设置好接口地址\n      [CRUD.HOOK.beforeRefresh]() {\n        if(defaultCrud.initQry){\n          defaultCrud.loading = true\n          return true\n        }else{\n          defaultCrud.initQry = true\n          defaultCrud.loading = false\n          return false\n        }\n      },\n      viewHandle(row) {\n        this.form = row\n        this.showDialog = true\n      },\n      getDepts() {\n        /*getDepts({ enabled: true }).then(res => {\n          this.depts = res.content\n        })*/\n        getResultDepts().then(res => {\n          this.depts = res.content\n        })\n      },\n      refreshList() {\n        this.crud.refresh()\n      },\n      forceUpdate() {\n        this.$forceUpdate()\n      },\n      initIndFirstType() {\n        crudIndCategory.getCategoryList(0).then(res => {\n          this.qryIndFirstType = [];\n          this.formIndFirstType = [];\n          const data = res.data;\n          if(res.code == 0) {\n            for(let i=0; i<data.length; i++) {\n              this.qryIndFirstType.push({id: data[i].id, label: data[i].categoryName, value: data[i].id})\n              this.formIndFirstType.push({id: data[i].id, label: data[i].categoryName, value: data[i].id})\n            }\n          }\n        })\n      },\n    }\n  }\n",null]}