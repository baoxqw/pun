{"remainingRequest":"D:\\GienProject\\poc\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GienProject\\poc\\Pncui-Indicator\\src\\views\\indicators\\batch\\metaModel.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GienProject\\poc\\Pncui-Indicator\\src\\views\\indicators\\batch\\metaModel.vue","mtime":1647393902998},{"path":"D:\\GienProject\\poc\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GienProject\\poc\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\GienProject\\poc\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GienProject\\poc\\Pncui-Indicator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getDatabases,\n  getTableNames,\n  getTableColumns,\n  syncColumns,\n  dataModelTable,\n  dataModelRemove,\n  dataModelQuery,\n  addDataModelColumn,\n  addBatchModelColumn,\n  updateDataModelTable,\n  dataModelColumnRemove,\n  sqlText,\n  checkWord,\n  queryTableColumn,\n  dataDemandList,\n  listUser,\n  getDicts,\n  importExcel,\n  importTemp,\n  download,\n  getDataSourceNames\n} from '@/api/indicators/metaModel'\nimport qs from 'qs'\nimport {\n  downloadFile\n} from '@eladmin/utils/index'\nimport SqlEditor from \"./SqlEditor\";\nimport sqlFormatter from \"sql-formatter\";\n\nexport default {\n  name: \"metaModel\",\n  components: {\n    SqlEditor,\n  },\n  data() {\n    return {\n      activeName: \"first\",\n      // 保存时加载\n      subLoading: false,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 数据表表格数据\n      componentList: [],\n      // 弹出层标题\n      title: \"\",\n      // 是否显示弹出层\n      open: false,\n      //关联需求码表\n      demandOptions: [],\n      doLoading: false,\n      //创建人码表\n      peopleOptions: [],\n      // 表单参数\n      form: {\n        // tableRegionalBut:\"\",\n        // regionalType:\"\",\n        tabName:\"\",\n        tabNameCn:\"\",\n        modelLvl:\"\",\n        tabDesc:\"\",\n      },\n      // 表单校验\n      rules: {\n        // tableRegionalBut: [{\n        //   required: true,\n        //   message: \"请选择数据源\",\n        //   trigger: \"blur\"\n        // }],\n        tabNameCn: [{\n          required: true,\n          message: \"表中文名称不能为空\",\n          trigger: \"blur\"\n        }],\n        // regionalType: [{\n        //   required: true,\n        //   message: \"请选择SCHEMA\",\n        //   trigger: \"blur\"\n        // }],\n        tabName: [{\n          required: true,\n          message: \"数据表名\",\n          trigger: \"blur\"\n        }],\n        tabNameCn: [{\n          required: true,\n          message: \"请选择数据模型名称\",\n          trigger: \"blur\"\n        }],\n        modelLvl: [{\n          required: true,\n          message: \"请选择模型目录\",\n          trigger: \"blur\"\n        }]\n      },\n      secondDisabled: false,\n      //表格字段\n      fieldsData: [],\n      syncFieldsData: [],\n\n      openTypes: null,\n\n      dialogVisible: false,\n      creTabsqlLoading: false,\n      fieldsLoading: false,\n\n      resertId:'',\n      //需求更新频率码表\n      demandReqFrequencyList: [],\n      // dbTypeOptions: [],\n      modelLvlOptions: [],\n\n      // regionalType: [],\n      tabName: [],\n      TableColumns: [],\n      synccolumns: [],\n\n\n      query: {\n        tabName: '',\n        tabNameCn: '',\n        createBy: '',\n      },\n      pageNum: 1,\n      pageSize: 10,\n      layout: 'total, prev, pager, next, sizes',\n      loading: \"\",\n      background: true,\n\n    }\n  },\n  created() {\n    //列表\n    this.getList();\n    // this.getDatabases();\n    this.changeDatabases()\n    //需求更新频率码表\n    getDicts(\"demand_req_frequency\").then((res) => {\n      this.demandReqFrequencyList = res.data || [];\n    });\n    // getDicts(\"data_db_type\").then((response) => {\n    //   this.dbTypeOptions = response.data;\n    // });\n    // this.IgetDataSourceNames();\n    getDicts(\"model_lvl\").then((response) => {\n      this.modelLvlOptions = response.data;\n    })\n\n    //关联需求码表\n    // this.dataDemandList();\n\n    //创建人码表\n    // listUser({\n    //     pageNum: 1,\n    //     pageSize: 1000,\n    //     status: 0\n    //   })\n    //   .then((res) => {\n    //     console.log(res);\n    //     if (res.code === 200) {\n    //       this.peopleOptions = res.rows.map((item) => ({\n    //         nickName: item.nickName,\n    //         userId: item.userId,\n    //       }));\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n  },\n\n  methods: {\n\n    // IgetDataSourceNames() {\n    //   getDataSourceNames().then((res) => {\n    //     if (res.code === 200) {\n    //       let Num = [];\n    //       for (let i in res.data) {\n    //         var j = {};\n    //         j.label = res.data[i];\n    //         j.value = res.data[i];\n    //         Num.push(j);\n    //       }\n    //       this.dbTypeOptions = Num;\n    //     }\n    //   }).catch((err) => {});\n    // },\n\n\n    //搜索\n    handleQuery() {\n      this.pageNum = 1;\n      this.getList();\n    },\n\n    //搜索框重置\n    resetQuery() {\n      this.pageNum = 1;\n      this.pageSize = 10;\n      this.query.tabName = '';\n      this.query.tabNameCn = '';\n      this.query.createBy = '';\n      this.handleQuery();\n    },\n\n    //页数\n    handleSizeChange(val) {\n      this.pageSize = val;\n      this.getList();\n    },\n\n    //页码\n    handleCurrentChange(val) {\n      this.pageNum = val;\n      this.getList();\n    },\n\n    //列表\n    getList() {\n      this.loading = true;\n      let params = {};\n      params = {\n        ...this.query,\n        pageNum: this.pageNum,\n        pageSize: this.pageSize\n      };\n      dataModelQuery(params).then(res => {\n        this.componentList = res.rows;\n        this.total = res.total;\n        this.loading = false;\n      })\n    },\n\n\n    //新增\n    handleAdd() {\n      this.openTypes = true\n      // this.reset();\n      this.open = true;\n      this.activeName = \"first\";\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n      this.title = \"创建数据模型\";\n      this.tabId = ''\n      // this.form.tableRegionalBut = 'pg'\n    },\n\n    //导入成功调用\n    handleSuccess() {\n      this.importDataText = '导入数据';\n      this.importDisabled = false;\n      this.$refs.upload.clearFiles();\n      this.getList();\n\n    },\n\n    //导入\n    uploadFile: function (item) {\n      const $this = this;\n      let errorMsg = [];\n      const h = this.$createElement;\n      this.isImported = true;\n      const formData = new FormData();\n      formData.append(\"file\", item.file);\n      importTemp(formData).then(data => {\n        if (data.code == \"200\" &&data.data.fail.length==0) {\n          $this.$message({\n            showClose: true,\n            type: 'success',\n            message: '导入成功 ',\n          })\n          this.handleSuccess();\n        } else {\n          // for (let i in data.data.fail) {\n          //   errorMsg.push(h('p', null, data.data.fail[i].errMsg))\n          // }\n          // $this.$message({\n          //   showClose: true,\n          //   duration: 0,\n          //   type: 'error',\n          //   message: h('div', null, errorMsg)\n          // })\n          $this.$message({\n            showClose: true,\n            type: 'error',\n            message: '导入失败 ',\n          })\n          this.handleSuccess();\n        }\n      })\n    },\n\n    //下载模板\n    downloadTemplate() {\n      window.open('/api/new/data/dataModelTable/excelDownload');\n    },\n\n    //上传之前\n    beforeUpload(file) {\n      var FileExt = file.name.replace(/.+\\./, \"\");\n      if ([\"xls\", \"xlsx\"].indexOf(FileExt.toLowerCase()) === -1) {\n        this.$message({\n          type: \"warning\",\n          message: \"请上传后缀名为xls、xlsx的附件！\"\n        });\n        return false;\n      }\n      this.importDataText = '正在导入';\n      this.importDisabled = true;\n    },\n\n\n\n    //导出\n    handleExport(row) {\n      let params = {};\n      params = {\n        tabName: row.tabName\n      };\n      download(params).then(result => {\n        downloadFile(result, '数据', 'xlsx');\n\n      }).catch(() => {})\n    },\n\n\n    //SQL预览\n    async SQLPreview({\n      tabId,\n      tabName,\n      tabNameCn,\n      createBy\n    }) {\n      this.dialogVisible = true;\n      // this.activeName2 = \"MYSQL\";\n      this.sqlParams = {\n        tabId,\n        tabName,\n        tabNameCn,\n        createBy,\n      };\n      this.renderSql(this.sqlParams);\n    },\n\n    async renderSql(sqlParams) {\n      this.creTabsqlLoading = true;\n      const result = await sqlText(sqlParams).catch((err) => {});\n      this.creTabsqlLoading = false;\n      if (result) this.$refs.sqleditor.setVal(sqlFormatter.format(result));\n    },\n\n\n    // 修改按钮操作 \n    handleUpdate(row) {\n      this.openTypes = false\n      this.reset();\n      this.form = {\n        ...row,\n        // dbType: row.tableType\n        dbType: 'MYSQL'\n      };\n      this.open = true;\n      this.title = \"编辑数据模型\";\n      this.fieldsLoading = true;\n      queryTableColumn({\n          tabId: row.tabId\n        })\n        .then((res) => {\n          if (res.code === 200) {\n            this.fieldsData = res.rows;\n          }\n          this.fieldsLoading = false;\n        })\n        .catch((err) => {\n          this.fieldsLoading = false;\n        });\n    },\n\n    // 表格删除按钮操作 \n    handleDelete(row) {\n      const tabIds = row.tabId;\n      const tip = \"是否确认删除该条数据项?\";\n\n      this.$confirm(tip, \"警告\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\",\n        })\n        .then(function () {\n          return dataModelRemove({\n            tabIds: typeof tabIds === \"number\" ? [tabIds] : tabIds,\n            status: 0,\n          });\n        })\n        .then(() => {\n          this.getList();\n          this.$message({\n            type: 'success',\n            message: '删除成功 '\n          });\n        });\n    },\n\n\n    //查询数据库名称\n    // getDatabases() {\n    //   let params = {};\n    //   params = {\n    //     datasourceName: 'mysql',\n    //   };\n    //   getDatabases(params).then(res => {\n    //     let Num = [];\n    //     for (let i in res.data) {\n    //       var j = {};\n    //       j.label = res.data[i];\n    //       Num.push(j);\n    //     }\n    //     this.regionalType = Num;\n    //   })\n    // },\n    //选择查询数据库名称\n    changeDatabases() {\n      // console.log(this.form.regionalType)\n      this.getTableNames('zhejiangpoc'); //??????\n      this.form.tabName = [];\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n    },\n    //查询数据表名称\n    getTableNames(v) {\n      let params = {};\n      params = {\n        databaseName: v,\n      }\n      getTableNames(params).then(res => {\n        let Num = [];\n        for (let i in res.data) {\n          var j = {};\n          j.label = res.data[i];\n          Num.push(j);\n        }\n        this.tabName = Num\n      })\n    },\n    //选择查询数据表名称\n    changeTableNames() {\n      this.getTableColumns('zhejiangpoc', this.form.tabName);\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n    },\n\n    //查询指定数据表中的列名\n    getTableColumns(v, n) {\n      let params = {};\n      params = {\n        databaseName: v,\n        tableName: n\n      };\n      getTableColumns(params).then(res => {\n        this.fieldsData = res.data;\n      })\n    },\n\n    //关联需求码表\n    dataDemandList(demandName = \"\") {\n      return dataDemandList({\n          demandName,\n          status: 2,\n          pageNum: 1,\n          pageSize: 20\n        })\n        .then((res) => {\n          console.log(res);\n          if (res.code === 200) {\n            this.demandOptions = res.rows.map((item) => ({\n              demandId: item.demandId,\n              demandName: item.demandName,\n              demandReqFrequency: item.demandReqFrequency,\n              demandReqTime: item.demandReqTime,\n            }));\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n\n    //关联需求码表查询\n    async demandRelaQuery(keywords) {\n      if (keywords) {\n        this.doLoading = true;\n        await this.dataDemandList(keywords);\n        this.doLoading = false;\n      } else {\n        this.demandOptions = [];\n      }\n    },\n\n    //关联需求改变\n    demandOnChange(demandId) {\n      if (!demandId) {\n        this.form.dataUpdFrequency = null;\n        this.form.dataUpdTime = null;\n        return;\n      }\n      const result = this.demandOptions.find(\n        (item) => item.demandId === demandId\n      );\n      this.form.dataUpdFrequency = result.demandReqFrequency;\n      this.form.dataUpdTime = result.demandReqTime;\n    },\n    //同步数据表中的列\n    syncGetColumns() {\n      let params = {};\n      params = {\n        databaseName: 'zhejiangpoc',\n        tableName: this.form.tabName\n      };\n\n      if (!this.form.tabName) {\n        this.$message({\n          type: 'error',\n          message: '请选择数据表名'\n        });\n      } else {\n        syncColumns(params).then(res => {\n          this.fieldsData = res.data.oldData;\n          if (!this.openTypes) {\n            this.syncFieldsData = res.data.newData.filter(item => item.flag != 2)\n          }\n\n        })\n      }\n    },\n\n    resertGetColumns(){\n\n        if (!this.form.tabName) {\n        this.$message({\n          type: 'error',\n          message: '请选择数据表名'\n        });\n      } else {\n       this.getTableColumns('zhejiangpoc', this.form.tabName);\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n      }\n\n    },\n\n\n    //  内部表格删除\n    innerDelete(index, rows) {\n      rows.splice(index, 1);\n    },\n    //  内部表格启用/停用\n    innerUpdate(index, rows) {\n      if (rows[index].status == '1') {\n        rows[index].status = '2';\n      } else {\n        rows[index].status = '1';\n      }\n    },\n\n    handleClick(tab, event) {\n      console.log(\"=====\" + tab, event);\n    },\n\n    //提交按钮 \n    submitForm() {\n\n      this.$refs[\"form\"].validate(async (valid) => {\n        if (valid) {\n          if (\n            this.fieldsData.some(\n              (item) => !item.colName || !item.colType\n            ) || !this.fieldsData.length\n          ) {\n            this.$message.warning(\"除字段中文名外字段信息不能有空值\");\n            return;\n          }\n          let result = null;\n          this.subLoading = true;\n          if (this.form.tabId) {\n            result = await dataModelTable({\n              ...this.form,\n              regionalType:'zhejiangpoc',\n              dbType: 'MYSQL'\n            }, \"put\", '/edit').catch(() => {});\n            if (result && result.code === 200) {\n              this.$message({\n                type: 'success',\n                message: '修改成功 '\n              });\n              this.updateDataModelTable({\n                tabId: this.form.tabId,\n                list: this.fieldsData,\n              });\n              this.resetQuery()\n            } else {\n              this.$message({\n                type: 'error',\n                message: result.msg\n              });\n            }\n          } else {\n            result = await dataModelTable({\n              ...this.form,\n              regionalType:'zhejiangpoc',\n              dbType: 'MYSQL'\n            }, \"post\", '/add').catch(() => {});\n            if (result && result.code === 200) {\n              this.$message({\n                type: 'success',\n                message: '新增成功 '\n              });\n              this.addBatchModelColumn({\n                tabId: result.data.tabId,\n                list: this.fieldsData,\n              });\n              this.resetQuery()\n            } else {\n              this.$message({\n                type: 'error',\n                message: result.msg\n              })\n            }\n          }\n          this.subLoading = false;\n        } else {\n          this.activeName = \"first\";\n        }\n      });\n    },\n\n    // 字段批量新增\n    async addBatchModelColumn(data) {\n      console.log(data);\n      const result = await addBatchModelColumn(data).catch((err) => {\n        console.log(err);\n      });\n      this.open = false;\n      console.log(result);\n    },\n    // 字段批量修改\n    async updateDataModelTable(data) {\n      const result = await updateDataModelTable(data).catch((err) => {});\n      this.open = false;\n      console.log(result);\n    },\n\n    //关闭对话框\n    cancel() {\n      this.open = false;\n      this.activeName = 'first';\n      this.reset();\n    },\n\n    // 重置对话框\n    reset() {\n      this.form = {};\n      // this.form.tableRegionalBut = 'pg'\n      // this.form.regionalType=''\n      // this.form.tabName=''\n      // this.form.tabNameCn=''\n      // this.form.modelLvl=''\n      // this.form.tabDesc=''\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n      // this.tabId = ''\n    },\n\n    cellStyle(row){\n      if(row.row.flag===\"1\"){\n        return \"background:#e1f3d8;height:49px\"\n      }else if(row.row.flag===\"2\" ){\n        return \"background:#fde2e2;height:49px\"\n      }else if(row.row.flag===\"0\" ){\n        return \"height:49px\"\n      }\n    }\n  }\n}\n",null]}