{"remainingRequest":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/babel-loader/lib/index.js!/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/src/views/indicators/batch/catalogue.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/src/views/indicators/batch/catalogue.vue","mtime":1646964810000},{"path":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuqianwen/Desktop/computer/农商/poc原项目/poc 2/Pncui-Indicator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/xuqianwen/Desktop/computer/\\u519C\\u5546/poc\\u539F\\u9879\\u76EE/poc 2/Pncui-Indicator/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/Users/xuqianwen/Desktop/computer/\\u519C\\u5546/poc\\u539F\\u9879\\u76EE/poc 2/Pncui-Indicator/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/Users/xuqianwen/Desktop/computer/\\u519C\\u5546/poc\\u539F\\u9879\\u76EE/poc 2/Pncui-Indicator/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getDatabases as _getDatabases, getTableNames as _getTableNames, getTableColumns as _getTableColumns, syncColumns, dataModelTable, dataModelRemove, dataModelQuery, addDataModelColumn, addBatchModelColumn as _addBatchModelColumn, updateDataModelTable as _updateDataModelTable, dataModelColumnRemove, sqlText, checkWord, queryTableColumn, dataDemandList as _dataDemandList, listUser, getDicts, importExcel, importTemp, download, getDataSourceNames as _getDataSourceNames } from '@/api/indicators/metaModel';\nimport qs from 'qs';\nimport { downloadFile } from '@eladmin/utils/index';\nimport SqlEditor from \"./SqlEditor\";\nimport sqlFormatter from \"sql-formatter\";\nexport default {\n  name: \"metaModel\",\n  components: {\n    SqlEditor: SqlEditor\n  },\n  data: function data() {\n    var _rules;\n\n    return {\n      activeName: \"first\",\n      // 保存时加载\n      subLoading: false,\n      // 选中数组\n      ids: [],\n      // 非单个禁用\n      single: true,\n      // 非多个禁用\n      multiple: true,\n      // 总条数\n      total: 0,\n      // 数据表表格数据\n      componentList: [],\n      // 弹出层标题\n      title: \"\",\n      // 是否显示弹出层\n      open: false,\n      //关联需求码表\n      demandOptions: [],\n      doLoading: false,\n      //创建人码表\n      peopleOptions: [],\n      // 表单参数\n      form: {},\n      // 表单校验\n      rules: (_rules = {\n        tableRegionalBut: [{\n          required: true,\n          message: \"请选择数据源\",\n          trigger: \"blur\"\n        }],\n        tabNameCn: [{\n          required: true,\n          message: \"表中文名称不能为空\",\n          trigger: \"blur\"\n        }],\n        regionalType: [{\n          required: true,\n          message: \"请选择SCHEMA\",\n          trigger: \"blur\"\n        }],\n        tabName: [{\n          required: true,\n          message: \"数据表名\",\n          trigger: \"blur\"\n        }]\n      }, _defineProperty(_rules, \"tabNameCn\", [{\n        required: true,\n        message: \"请选择数据模型名称\",\n        trigger: \"blur\"\n      }]), _defineProperty(_rules, \"modelLvl\", [{\n        required: true,\n        message: \"请选择模型目录\",\n        trigger: \"blur\"\n      }]), _rules),\n      secondDisabled: false,\n      //表格字段\n      fieldsData: [],\n      syncFieldsData: [],\n      openTypes: null,\n      dialogVisible: false,\n      creTabsqlLoading: false,\n      fieldsLoading: false,\n      resertId: '',\n      //需求更新频率码表\n      demandReqFrequencyList: [],\n      dbTypeOptions: [],\n      modelLvlOptions: [],\n      regionalType: [],\n      tabName: [],\n      TableColumns: [],\n      synccolumns: [],\n      query: {\n        tabName: '',\n        tabNameCn: '',\n        createBy: ''\n      },\n      pageNum: 1,\n      pageSize: 10,\n      layout: 'total, prev, pager, next, sizes',\n      loading: \"\",\n      background: true\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    //列表\n    this.getList();\n    this.getDatabases(); //需求更新频率码表\n\n    getDicts(\"demand_req_frequency\").then(function (res) {\n      _this.demandReqFrequencyList = res.data || [];\n    }); // getDicts(\"data_db_type\").then((response) => {\n    //   this.dbTypeOptions = response.data;\n    // });\n\n    this.getDataSourceNames();\n    getDicts(\"model_lvl\").then(function (response) {\n      _this.modelLvlOptions = response.data;\n    }); //关联需求码表\n    // this.dataDemandList();\n    //创建人码表\n    // listUser({\n    //     pageNum: 1,\n    //     pageSize: 1000,\n    //     status: 0\n    //   })\n    //   .then((res) => {\n    //     console.log(res);\n    //     if (res.code === 200) {\n    //       this.peopleOptions = res.rows.map((item) => ({\n    //         nickName: item.nickName,\n    //         userId: item.userId,\n    //       }));\n    //     }\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n  },\n  methods: {\n    getDataSourceNames: function getDataSourceNames() {\n      var _this2 = this;\n\n      _getDataSourceNames().then(function (res) {\n        if (res.code === 200) {\n          var Num = [];\n\n          for (var i in res.data) {\n            var j = {};\n            j.dictLabel = res.data[i];\n            Num.push(j);\n          }\n\n          console.log(666);\n          console.log(Num);\n          _this2.dbTypeOptions = Num;\n        }\n      }).catch(function (err) {});\n    },\n    //搜索\n    handleQuery: function handleQuery() {\n      this.pageNum = 1;\n      this.getList();\n    },\n    //搜索框重置\n    resetQuery: function resetQuery() {\n      this.pageNum = 1;\n      this.pageSize = 10;\n      this.query.tabName = '';\n      this.query.tabNameCn = '';\n      this.query.createBy = '';\n      this.handleQuery();\n    },\n    //页数\n    handleSizeChange: function handleSizeChange(val) {\n      this.pageSize = val;\n      this.getList();\n    },\n    //页码\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.pageNum = val;\n      this.getList();\n    },\n    //列表\n    getList: function getList() {\n      var _this3 = this;\n\n      this.loading = true;\n      var params = {};\n      params = _objectSpread(_objectSpread({}, this.query), {}, {\n        pageNum: this.pageNum,\n        pageSize: this.pageSize\n      });\n      dataModelQuery(params).then(function (res) {\n        _this3.componentList = res.rows;\n        _this3.total = res.total;\n        _this3.loading = false;\n      });\n    },\n    //新增\n    handleAdd: function handleAdd() {\n      this.openTypes = true;\n      this.reset();\n      this.open = true;\n      this.activeName = \"first\";\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n      this.title = \"创建数据模型\";\n      this.form.tableRegionalBut = 'pg';\n    },\n    //导入成功调用\n    handleSuccess: function handleSuccess() {\n      this.importDataText = '导入数据';\n      this.importDisabled = false;\n      this.$refs.upload.clearFiles();\n      this.getList();\n    },\n    //导入\n    uploadFile: function uploadFile(item) {\n      var _this4 = this;\n\n      var $this = this;\n      var errorMsg = [];\n      var h = this.$createElement;\n      this.isImported = true;\n      var formData = new FormData();\n      formData.append(\"file\", item.file);\n      importTemp(formData).then(function (data) {\n        if (data.msg == \"成功\" || data.msg == \"操作成功\") {\n          $this.$message({\n            showClose: true,\n            type: 'success',\n            message: '导入成功 '\n          });\n\n          _this4.handleSuccess();\n        } else {\n          for (var i in data.msg) {\n            errorMsg.push(h('p', null, data.msg[i]));\n          }\n\n          $this.$message({\n            showClose: true,\n            duration: 0,\n            type: 'error',\n            message: h('div', null, errorMsg)\n          });\n\n          _this4.handleSuccess();\n        }\n      });\n    },\n    //下载模板\n    downloadTemplate: function downloadTemplate() {\n      window.open('/api/data/dataModelTable/excelDownload');\n    },\n    //上传之前\n    beforeUpload: function beforeUpload(file) {\n      var FileExt = file.name.replace(/.+\\./, \"\");\n\n      if ([\"xls\", \"xlsx\"].indexOf(FileExt.toLowerCase()) === -1) {\n        this.$message({\n          type: \"warning\",\n          message: \"请上传后缀名为xls、xlsx的附件！\"\n        });\n        return false;\n      }\n\n      this.importDataText = '正在导入';\n      this.importDisabled = true;\n    },\n    //导出\n    handleExport: function handleExport(row) {\n      var params = {};\n      params = {\n        tabName: row.tabName\n      };\n      download(params).then(function (result) {\n        downloadFile(result, '数据', 'xlsx');\n      }).catch(function () {});\n    },\n    //SQL预览\n    SQLPreview: function () {\n      var _SQLPreview = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {\n        var tabId, tabName, tabNameCn, createBy;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tabId = _ref.tabId, tabName = _ref.tabName, tabNameCn = _ref.tabNameCn, createBy = _ref.createBy;\n                this.dialogVisible = true; // this.activeName2 = \"MYSQL\";\n\n                this.sqlParams = {\n                  tabId: tabId,\n                  tabName: tabName,\n                  tabNameCn: tabNameCn,\n                  createBy: createBy\n                };\n                this.renderSql(this.sqlParams);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function SQLPreview(_x) {\n        return _SQLPreview.apply(this, arguments);\n      }\n\n      return SQLPreview;\n    }(),\n    renderSql: function () {\n      var _renderSql = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(sqlParams) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.creTabsqlLoading = true;\n                _context2.next = 3;\n                return sqlText(sqlParams).catch(function (err) {});\n\n              case 3:\n                result = _context2.sent;\n                this.creTabsqlLoading = false;\n                if (result) this.$refs.sqleditor.setVal(sqlFormatter.format(result));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function renderSql(_x2) {\n        return _renderSql.apply(this, arguments);\n      }\n\n      return renderSql;\n    }(),\n    // 修改按钮操作 \n    handleUpdate: function handleUpdate(row) {\n      var _this5 = this;\n\n      this.openTypes = false;\n      this.reset();\n      this.form = _objectSpread(_objectSpread({}, row), {}, {\n        // dbType: row.tableType\n        dbType: 'MYSQL'\n      });\n      this.open = true;\n      this.title = \"编辑数据模型\";\n      this.fieldsLoading = true;\n      queryTableColumn({\n        tabId: row.tabId\n      }).then(function (res) {\n        if (res.code === 200) {\n          _this5.fieldsData = res.rows;\n        }\n\n        _this5.fieldsLoading = false;\n      }).catch(function (err) {\n        _this5.fieldsLoading = false;\n      });\n    },\n    // 表格删除按钮操作 \n    handleDelete: function handleDelete(row) {\n      var _this6 = this;\n\n      var tabIds = row.tabId;\n      var tip = \"是否确认删除该条数据项?\";\n      this.$confirm(tip, \"警告\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        return dataModelRemove({\n          tabIds: typeof tabIds === \"number\" ? [tabIds] : tabIds,\n          status: 0\n        });\n      }).then(function () {\n        _this6.getList();\n\n        _this6.$message({\n          type: 'success',\n          message: '删除成功 '\n        });\n      });\n    },\n    //查询数据库名称\n    getDatabases: function getDatabases() {\n      var _this7 = this;\n\n      var params = {};\n      params = {\n        datasourceName: 'mysql'\n      };\n\n      _getDatabases(params).then(function (res) {\n        var Num = [];\n\n        for (var i in res.data) {\n          var j = {};\n          j.label = res.data[i];\n          Num.push(j);\n        }\n\n        _this7.regionalType = Num;\n      });\n    },\n    //选择查询数据库名称\n    changeDatabases: function changeDatabases() {\n      // console.log(this.form.regionalType)\n      this.getTableNames(this.form.regionalType);\n      this.form.tabName = [];\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n    },\n    //查询数据表名称\n    getTableNames: function getTableNames(v) {\n      var _this8 = this;\n\n      var params = {};\n      params = {\n        databaseName: v\n      };\n\n      _getTableNames(params).then(function (res) {\n        var Num = [];\n\n        for (var i in res.data) {\n          var j = {};\n          j.label = res.data[i];\n          Num.push(j);\n        }\n\n        _this8.tabName = Num;\n      });\n    },\n    //选择查询数据表名称\n    changeTableNames: function changeTableNames() {\n      this.getTableColumns(this.form.regionalType, this.form.tabName);\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n    },\n    //查询指定数据表中的列名\n    getTableColumns: function getTableColumns(v, n) {\n      var _this9 = this;\n\n      var params = {};\n      params = {\n        databaseName: v,\n        tableName: n\n      };\n\n      _getTableColumns(params).then(function (res) {\n        _this9.fieldsData = res.data;\n      });\n    },\n    //关联需求码表\n    dataDemandList: function dataDemandList() {\n      var _this10 = this;\n\n      var demandName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      return _dataDemandList({\n        demandName: demandName,\n        status: 2,\n        pageNum: 1,\n        pageSize: 20\n      }).then(function (res) {\n        console.log(res);\n\n        if (res.code === 200) {\n          _this10.demandOptions = res.rows.map(function (item) {\n            return {\n              demandId: item.demandId,\n              demandName: item.demandName,\n              demandReqFrequency: item.demandReqFrequency,\n              demandReqTime: item.demandReqTime\n            };\n          });\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    //关联需求码表查询\n    demandRelaQuery: function () {\n      var _demandRelaQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(keywords) {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!keywords) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.doLoading = true;\n                _context3.next = 4;\n                return this.dataDemandList(keywords);\n\n              case 4:\n                this.doLoading = false;\n                _context3.next = 8;\n                break;\n\n              case 7:\n                this.demandOptions = [];\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function demandRelaQuery(_x3) {\n        return _demandRelaQuery.apply(this, arguments);\n      }\n\n      return demandRelaQuery;\n    }(),\n    //关联需求改变\n    demandOnChange: function demandOnChange(demandId) {\n      if (!demandId) {\n        this.form.dataUpdFrequency = null;\n        this.form.dataUpdTime = null;\n        return;\n      }\n\n      var result = this.demandOptions.find(function (item) {\n        return item.demandId === demandId;\n      });\n      this.form.dataUpdFrequency = result.demandReqFrequency;\n      this.form.dataUpdTime = result.demandReqTime;\n    },\n    //同步数据表中的列\n    syncGetColumns: function syncGetColumns() {\n      var _this11 = this;\n\n      var params = {};\n      params = {\n        databaseName: this.form.regionalType,\n        tableName: this.form.tabName\n      };\n\n      if (!this.form.regionalType) {\n        this.$message({\n          type: 'error',\n          message: '请选择SCHEMA'\n        });\n      } else if (!this.form.tabName) {\n        this.$message({\n          type: 'error',\n          message: '请选择数据表名'\n        });\n      } else {\n        syncColumns(params).then(function (res) {\n          _this11.fieldsData = res.data.oldData;\n\n          if (!_this11.openTypes) {\n            _this11.syncFieldsData = res.data.newData.filter(function (item) {\n              return item.flag != 2;\n            });\n          }\n        });\n      }\n    },\n    resertGetColumns: function resertGetColumns() {\n      if (!this.form.regionalType) {\n        this.$message({\n          type: 'error',\n          message: '请选择SCHEMA'\n        });\n      } else if (!this.form.tabName) {\n        this.$message({\n          type: 'error',\n          message: '请选择数据表名'\n        });\n      } else {\n        this.getTableColumns(this.form.regionalType, this.form.tabName);\n        this.fieldsData = [];\n        this.syncFieldsData = [];\n      }\n    },\n    //  内部表格删除\n    innerDelete: function innerDelete(index, rows) {\n      rows.splice(index, 1);\n    },\n    //  内部表格启用/停用\n    innerUpdate: function innerUpdate(index, rows) {\n      if (rows[index].status == '1') {\n        rows[index].status = '2';\n      } else {\n        rows[index].status = '1';\n      }\n    },\n    handleClick: function handleClick(tab, event) {\n      console.log(\"=====\" + tab, event);\n    },\n    //提交按钮 \n    submitForm: function submitForm() {\n      var _this12 = this;\n\n      this.$refs[\"form\"].validate( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(valid) {\n          var result;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  if (!valid) {\n                    _context4.next = 20;\n                    break;\n                  }\n\n                  if (!(_this12.fieldsData.some(function (item) {\n                    return !item.colName || !item.colType;\n                  }) || !_this12.fieldsData.length)) {\n                    _context4.next = 4;\n                    break;\n                  }\n\n                  _this12.$message.warning(\"除字段中文名外字段信息不能有空值\");\n\n                  return _context4.abrupt(\"return\");\n\n                case 4:\n                  result = null;\n                  _this12.subLoading = true;\n\n                  if (!_this12.form.tabId) {\n                    _context4.next = 13;\n                    break;\n                  }\n\n                  _context4.next = 9;\n                  return dataModelTable(_objectSpread(_objectSpread({}, _this12.form), {}, {\n                    dbType: 'MYSQL'\n                  }), \"put\", '/edit').catch(function () {});\n\n                case 9:\n                  result = _context4.sent;\n\n                  if (result && result.code === 200) {\n                    _this12.$message({\n                      type: 'success',\n                      message: '修改成功 '\n                    });\n\n                    _this12.updateDataModelTable({\n                      tabId: _this12.form.tabId,\n                      list: _this12.fieldsData\n                    });\n\n                    _this12.resetQuery();\n                  } else {\n                    _this12.$message({\n                      type: 'error',\n                      message: result.msg\n                    });\n                  }\n\n                  _context4.next = 17;\n                  break;\n\n                case 13:\n                  _context4.next = 15;\n                  return dataModelTable(_objectSpread(_objectSpread({}, _this12.form), {}, {\n                    dbType: 'MYSQL'\n                  }), \"post\", '/add').catch(function () {});\n\n                case 15:\n                  result = _context4.sent;\n\n                  if (result && result.code === 200) {\n                    _this12.$message({\n                      type: 'success',\n                      message: '新增成功 '\n                    });\n\n                    _this12.addBatchModelColumn({\n                      tabId: result.data.tabId,\n                      list: _this12.fieldsData\n                    });\n\n                    _this12.resetQuery();\n                  } else {\n                    _this12.$message({\n                      type: 'error',\n                      message: result.msg\n                    });\n                  }\n\n                case 17:\n                  _this12.subLoading = false;\n                  _context4.next = 21;\n                  break;\n\n                case 20:\n                  _this12.activeName = \"first\";\n\n                case 21:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    },\n    // 字段批量新增\n    addBatchModelColumn: function () {\n      var _addBatchModelColumn2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(data) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                console.log(data);\n                _context5.next = 3;\n                return _addBatchModelColumn(data).catch(function (err) {\n                  console.log(err);\n                });\n\n              case 3:\n                result = _context5.sent;\n                this.open = false;\n                console.log(result);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function addBatchModelColumn(_x5) {\n        return _addBatchModelColumn2.apply(this, arguments);\n      }\n\n      return addBatchModelColumn;\n    }(),\n    // 字段批量修改\n    updateDataModelTable: function () {\n      var _updateDataModelTable2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(data) {\n        var result;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _updateDataModelTable(data).catch(function (err) {});\n\n              case 2:\n                result = _context6.sent;\n                this.open = false;\n                console.log(result);\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateDataModelTable(_x6) {\n        return _updateDataModelTable2.apply(this, arguments);\n      }\n\n      return updateDataModelTable;\n    }(),\n    //关闭对话框\n    cancel: function cancel() {\n      this.open = false;\n      this.activeName = 'first';\n      this.reset();\n    },\n    // 重置对话框\n    reset: function reset() {\n      this.form = {};\n      this.fieldsData = [];\n      this.syncFieldsData = [];\n    },\n    cellStyle: function cellStyle(row) {\n      if (row.row.flag === \"1\") {\n        return \"background:#e1f3d8;height:49px\";\n      } else if (row.row.flag === \"2\") {\n        return \"background:#fde2e2;height:49px\";\n      } else if (row.row.flag === \"0\") {\n        return \"height:49px\";\n      }\n    }\n  }\n};",null]}