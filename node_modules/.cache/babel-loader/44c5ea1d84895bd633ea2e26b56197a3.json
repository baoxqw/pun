{"remainingRequest":"D:\\项目\\苏州指标\\苏州指标indicator\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js!D:\\项目\\苏州指标\\苏州指标indicator\\indicator\\Pncui-Indicator\\src\\api\\indicators\\dashboard.js","dependencies":[{"path":"D:\\项目\\苏州指标\\苏州指标indicator\\indicator\\Pncui-Indicator\\src\\api\\indicators\\dashboard.js","mtime":1642127500101},{"path":"D:\\项目\\苏州指标\\苏州指标indicator\\indicator\\Pncui-Indicator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\项目\\苏州指标\\苏州指标indicator\\indicator\\Pncui-Indicator\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["import request from '@/utils/request';\n/*import data from './dashboard-data.json'\nimport {getYesterday} from '@eladmin/utils/data_format'*/\n\n/*const mock = {\n    \"periodDate\": true,\n    \"productBal\": true,\n    \"productCustCount\": true,\n    \"trendAnalysis\": true,\n    \"depositAnalysis\": true,\n    \"loanFiveClass\": true,\n    \"badnessLoan\": true,\n    \"orgDlbalOrder\": true,\n    \"todoCount\": true,\n    \"subscribeRpt\": false,\n    \"getDbpPath\" : false\n}*/\n\nvar url = 'v1/core/dashboard';\n/*\nexport function periodDate() {\n    if (mock[\"periodDate\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: getYesterday()})\n        })\n    } else {\n        return request({\n            url: url + '/period-date',\n            method: 'get'\n        })\n    }\n}\n\nexport function productBal(date) {\n    if (mock[\"productBal\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.productBal})\n        })\n    } else {\n        return request({\n            url: url + '/product-bal/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function productCustCount(date) {\n    if (mock[\"productCustCount\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.productCustCount})\n        })\n    } else {\n        return request({\n            url: url + '/product-cust-count/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function trendAnalysis(date) {\n    if (mock[\"trendAnalysis\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.trendAnalysis})\n        })\n    } else {\n        return request({\n            url: url + '/trend-analysis/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function depositAnalysis(date) {\n    if (mock[\"depositAnalysis\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.depositAnalysis})\n        })\n    } else {\n        return request({\n            url: url + '/deposit-analysis/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function loanFiveClass(date) {\n    if (mock[\"loanFiveClass\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.loanFiveClass})\n        })\n    } else {\n        return request({\n            url: url + '/loan-five-class/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function badnessLoan(date) {\n    if (mock[\"badnessLoan\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.badnessLoan})\n        })\n    } else {\n        return request({\n            url: url + '/badness-loan/' + date,\n            method: 'get'\n        })\n    }\n}\n\nexport function orgDlbalOrder(date) {\n    if (mock[\"orgDlbalOrder\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: data.orgDlbalOrder})\n        })\n    } else {\n        return request({\n            url: url + '/org-dlbal-order/' + date,\n            method: 'get'\n        })\n    }\n}*/\n\n/**\n * 待办事项数量查询\n * @returns {Promise<unknown>|AxiosPromise}\n */\n\nexport function todoCount() {\n  return request({\n    url: 'workflow/myTask/waitApprove',\n    method: 'get'\n  });\n}\n/**\n * 待办事项数量查询\n * @returns {Promise<unknown>|AxiosPromise}\n */\n\nexport function subscribeRpt() {\n  return request({\n    url: url + '/subscribe/subscribeRpt',\n    method: 'get'\n  });\n}\n/*\nexport function getDbpPath() {\n    if (mock[\"getDbpPath\"]) {\n        return new Promise(function (resolve, reject) {\n            resolve({code: 0, data: {total: 0}})\n        })\n    } else {\n        return request({\n            url: url + '/dbp/getDbpPath',\n            method: 'get'\n        })\n    }\n}*/",null]}